{"version":3,"sources":["hooksComponents/UseStateHookComponent/UseStateHookComponent.js","App.js","serviceWorker.js","index.js"],"names":["Contador","_useState","useState","_useState2","Object","slicedToArray","contador","setContador","_useState3","uno","dos","_useState4","micontador","setMicontador","SumaTotal","react_default","a","createElement","Fragment","name","id","cols","rows","onClick","className","document","querySelector","value","alert","console","log","App","class","UseStateHookComponent_UseStateHookComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAmGeA,SA1DE,WAAM,IAAAC,EACWC,mBAAS,GADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdK,EADcH,EAAA,GACJI,EADIJ,EAAA,GAAAK,EAEeN,mBAAS,CAACO,IAAI,EAAEC,IAAI,IAFnCC,EAAAP,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEdI,EAFcD,EAAA,GAEFE,EAFEF,EAAA,GAKfG,EAAaR,EAAWM,EAAWH,IAAMG,EAAWF,IAK1D,OAAOK,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KAELH,EAAAC,EAAAC,cAAA,0CAA8BF,EAAAC,EAAAC,cAAA,WAA9B,IAAoCF,EAAAC,EAAAC,cAAA,YAAUE,KAAK,GAAGC,GAAG,OAAOC,KAAK,KAAKC,KAAK,KAA3C,OAApC,KAEAP,EAAAC,EAAAC,cAAA,4BAAoBX,GACpBS,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAIhB,EAAYD,EAAS,KAA1C,eACAS,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAIhB,EAAYD,EAAS,KAA1C,eAEAS,EAAAC,EAAAC,cAAA,OAAKO,UAAU,QACbT,EAAAC,EAAAC,cAAA,2BAAmBL,EAAWH,KAC9BM,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAIV,EAAc,CAACJ,IAAIG,EAAWH,IAAI,GAAIC,IAAIE,EAAWF,QAA1E,eACAK,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAIV,EAAc,CAACJ,IAAIG,EAAWH,IAAI,GAAIC,IAAIE,EAAWF,QAA1E,eACAK,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAIV,EAAc,CAACJ,IAAI,EAAGC,IAAIE,EAAWF,QAA1D,sBACAK,EAAAC,EAAAC,cAAA,sCAA8BL,EAAWF,KACzCK,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAIV,EAAc,CAACH,IAAIE,EAAWF,IAAIE,EAAWH,IAAIH,EAAUG,IAAIG,EAAWH,QAA/F,eACAM,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAIV,EAAc,CAACH,IAAIE,EAAWF,IAAIE,EAAWH,IAAIH,EAAUG,IAAIG,EAAWH,QAA/F,eACAM,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAIV,EAAc,CAACH,IAAI,EAAGD,IAAIG,EAAWH,QAA1D,sBACAM,EAAAC,EAAAC,cAAA,UAAQM,QAvBK,WAAQhB,EAAY,GAAIM,EAAc,CAACJ,IAAI,EAAGC,IAAI,MAuB/D,YACAK,EAAAC,EAAAC,cAAA,+BAAuBH,GACvBC,EAAAC,EAAAC,cAAA,UAAQM,QArBI,WAAQT,GAAaW,SAASC,cAAc,SAASC,MAAQC,MAAM,sBAAwBC,QAAQC,IAAI,mBAqBnH,qBCvDSC,MAXf,WACE,OACEhB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,KAAGe,MAAM,OAAT,kDAGAjB,EAAAC,EAAAC,cAACgB,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAAShB,SAASiB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a913ba27.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './UseStateHookComponent.css'\n\n//Clase con contador, constructor con this.state contador:0, y una función handlerclick que usa this.setstate y dentro lo cambia con un this.state.contador+1, luego en el return , onclick devuelve el this.handlerclick y vemos el this.state.contador en un h1\n//#region \n/* class Contador extends React.Component {\n  \n  constructor(){\n    super()\n    this.state = { contador: 0 }\n  }\n  \n  handlerClick = () => this.setState({contador: this.state.contador + 1 })\n  \n  render() {\n    return (\n      <React.Fragment > <br/>\n      <div class=\"ushc\">\n        soy el contador dentro de React.Fragment\n      <h1 class=\"ushc\">Contador: {this.state.contador}</h1>\n      <button onClick={this.handlerClick} class=\"ushc\">Incrementar</button>\n      </div>\n      </React.Fragment>)\n  }\n} */\n//#endregion\n\n/* HOOK ESTADO SIMPLE */\n\n/* const Contador = () => {\n  const miContador = useState(0)\n  console.log(miContador)\n  return (\n    <React.Fragment>\n      <h1>Contador: {miContador[0]}</h1>\n      <button onClick={()=>miContador[1](miContador[0]+1)}>Incrementar</button>\n    </React.Fragment>)\n} */\n\n/* HOOK CON UN OBJETO EN EL ESTADO */\n\nconst Contador = () => {\n  const [contador, setContador] = useState(0)\n  const [micontador, setMicontador] = useState({uno:0,dos:0})\n\n  const ResetAll = () => { setContador(0); setMicontador({uno:0, dos:0}) }\n  const SumaTotal = (contador + micontador.uno + micontador.dos);\n  //PREGUNTA -> porque no puedo guardar el valor del textvalue en una constante???\n  // const metaFijada = document.querySelector('#meta').value;\n  const metaFin = () => { SumaTotal >= document.querySelector('#meta').value ? alert('llegamos a la meta') : console.log('todavia falta') }\n  \n  return <React.Fragment>\n    \n    <div> La meta de este año es: <br/> <textarea name=\"\" id=\"meta\" cols=\"10\" rows=\"1\">100</textarea> </div>\n\n    <h4>Contador cero: {contador}</h4>\n    <button onClick={()=>setContador(contador+1)}>Incrementar</button>\n    <button onClick={()=>setContador(contador-1)}>Decrementar</button>\n    \n    <div className=\"ushc\">\n      <h4>contador uno: {micontador.uno}</h4>\n      <button onClick={()=>setMicontador({uno:micontador.uno+10, dos:micontador.dos})}>Incrementar</button>\n      <button onClick={()=>setMicontador({uno:micontador.uno-10, dos:micontador.dos})} >Decrementar</button>\n      <button onClick={()=>setMicontador({uno:0, dos:micontador.dos})}>Reset contador uno</button>\n      <h4>contador dos=cero + uno: {micontador.dos}</h4>\n      <button onClick={()=>setMicontador({dos:micontador.dos+micontador.uno+contador, uno:micontador.uno})}>Incrementar</button>\n      <button onClick={()=>setMicontador({dos:micontador.dos-micontador.uno-contador, uno:micontador.uno})}>Decrementar</button>\n      <button onClick={()=>setMicontador({dos:0, uno:micontador.uno})}>Reset contador dos</button>\n      <button onClick={ResetAll}>ResetAll</button>\n      <h4>La suma total es: {SumaTotal}</h4>\n      <button onClick={metaFin}>metaFin</button>\n    </div>\n\n  </React.Fragment>\n}\n\n/* Otro ejemplo de hooks */\n\n/* const Contador = () => {\n  \n  const [estado, setContador] = useState({nClick:0, contador: 0})\n\n  const handlerClickDecrement = () => {\n    if(estado.contador === 0) {\n      setContador({ nClick: estado.nClick+1 })\n      // setContador({ ...estado, nClick: estado.nClick+1 })\n    } else {\n      setContador({nClick: estado.nClick+1, contador: estado.contador-1})\n    }\n  }\n\n  return <React.Fragment>\n    <h1>Contador: {estado.contador}</h1>\n    <h2>nº Clicks Totales: {estado.nClick}</h2>\n    <button onClick={()=>setContador({nClick: estado.nClick+1, contador: estado.contador+1})}>Incrementar</button>\n    <button onClick={handlerClickDecrement}>Decrementar</button>\n  </React.Fragment>\n} */\n\nexport default Contador\n","import React from 'react';\nimport Contador from './hooksComponents/UseStateHookComponent/UseStateHookComponent'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p class=\"par\">\n        Soy el div dentro del return dentro del App.js\n      </p>\n      <Contador />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}